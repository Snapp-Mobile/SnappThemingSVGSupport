// Script to create a PR comment with code coverage results
const fs = require('fs');

// Get environment variables
const commentHeader = process.env.BOT_COMMENT_HEADER || '### 🛡️ Code Coverage Report';
const coverageSummaryFile = process.env.COVERAGE_SUMMARY_FILE || 'pr_coverage_summary.txt';

async function run() {
    try {
        // Read the coverage output
        const coverageOutput = fs.readFileSync(coverageSummaryFile, 'utf8');

        // Create the comment content
        const newComment = `
${commentHeader}

${coverageOutput}

_Generated by GitHub Actions._
`;

        // Fetch existing comments
        const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.payload.pull_request.number,
        });

        // Identify and delete previous bot comments
        const botComments = comments.data.filter(comment =>
                                                 comment.body.includes(commentHeader)
                                                 );

        for (const botComment of botComments) {
            await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
            });
        }

        // Create a comment on the pull request
        await github.rest.issues.createComment({
            issue_number: context.payload.pull_request.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: newComment,
        });

        console.log('PR comment created successfully!');
    } catch (error) {
        console.error('Error creating PR comment:', error);
        process.exit(1);
    }
}

// Execute the function
run();
