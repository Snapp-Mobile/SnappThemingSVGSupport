# This workflow will test a Swift project
 # For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-swift

 name: Package Test
 env:
   DESTINATION: 'platform=macOS,variant=Mac Catalyst,name=My Mac'
   SCHEME: 'SnappThemingSVGSupport'
   WORKSPACE_PATH: '.swiftpm/xcode/package.xcworkspace'
   COVERAGE_REPORT_PATH: './coverage/coverage.xcresult'
 on:
   push:
     branches: [ "main" ]
   pull_request:
     branches: [ "main" ]

 jobs:
   build:

     runs-on: macos-latest

     steps:
     - uses: actions/checkout@v4
     - name: List Xcode installations
       run: sudo ls -1 /Applications | grep "Xcode"
     - name: Select Xcode 16.2
       run: sudo xcode-select -s /Applications/Xcode_16.2.app/Contents/Developer

     - name: Run Swift Tests with Coverage
       run: |
         swift test --enable-swift-testing --enable-code-coverage
         CODECOV_PATH=$(swift test --enable-code-coverage --show-codecov-path)
         echo $CODECOV_PATH

     - name: Run Coverage Extraction Script
       run: bash .github/scripts/extract_coverage.sh

     - name: Comment on Pull Request
       if: github.event_name == 'pull_request'
       uses: actions/github-script@v6
       with:
         script: |
            const fs = require('fs');
            const coverageOutput = fs.readFileSync('pr_coverage_summary.txt', 'utf8');

            const newComment = `
            ### üõ°Ô∏è Code Coverage Report
            
            ${coverageOutput}

            _Generated by GitHub Actions._
            `;

            // Fetch existing comments
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
            });

            // Identify and delete previous bot comments
            const botComments = comments.data.filter(comment =>
              comment.body.includes("### üõ°Ô∏è Code Coverage Report")
            );

            for (const botComment of botComments) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
              });
            }

            // Create a comment on the pull request
            await github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: newComment,
            });
